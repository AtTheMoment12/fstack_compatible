#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <sys/shm.h>
#include <arpa/inet.h>
#include <assert.h>

#include "ff_api.h"
#include "ff_config.h"
#include "main.h"

#define MAX_EVENTS 512

int shmid;
int kq;
int shmid_socket;
int shmid_socket_ret;
int shmid_connect;
int shmid_connect_ret;
int shmid_send;
int shmid_send_ret;
int shmid_recv;
int shmid_recv_ret;
int shmid_bind;
int shmid_bind_ret;
struct kevent kevSet;
struct kevent events[MAX_EVENTS];

FMT *fmt_form, *fmt_socket, *fmt_connect, *fmt_send, *fmt_recv;
FMTR *fmtr_socket, *fmtr_connect, *fmtr_send, *fmtr_recv;

void service(void *arg)
{
    FMT *fmt_form = (FMT *)arg;
    if (fmt_form->flag == 1)
    {

        switch (fmt_form->form)
        {
        case SEND:
            printf("send fd:[%d] \n", fmt_send->fd);
            while (1)
            {
                if (fmt_send->flag == 1)
                {
                    break;
                }
            }
            if (fmt_send->flag == 1)
            {
                printf("fd offset = %d byte in address structure. \n",offsetof(struct string_msg_file, fd));
                printf("flag offset = %d byte in address structure.\n",offsetof(struct string_msg_file, flags));
                printf("nbyte offset = %d byte in address structure.\n",offsetof(struct string_msg_file, nbyte));
                printf("buf offset = %d byte in address structure.\n",offsetof(struct string_msg_file, buf));
                printf("write msg is send_fd:[%d] flags[%d] nbyte[%d] [%s]\n",fmt_send->smf.fd,fmt_send->smf.flags,fmt_send->smf.nbyte, fmt_send->smf.buf);
                ff_send(fmt_send->smf.fd, fmt_send->smf.buf, fmt_send->smf.nbyte, fmt_send->smf.flags);
                //printf("write msg is [%s] [%d] [%d]\n",fmt_send->buf,fmt_send->nbyte,fmt_send->flags);
                //ff_send(fmt_send->fd, fmt_send->buf, fmt_send->nbyte, fmt_send->flags);
                fmt_send->flag = 0;
            }
            
            fmt_form->flag = 0;
            break;
        case RECV:
            printf("fd:[%d] \n", fmt_recv->fd);
            while (1)
            {
                if (fmt_recv->flag == 1)
                {
                    break;
                }
            }
            if(fmt_recv->flag == 1){
                ff_recv(fmt_recv->smf.fd,fmt_recv->smf.buf,fmt_recv->smf.nbyte,fmt_recv->smf.flags);
                //ff_recv(fmt_recv->fd,fmt_recv->buf,fmt_recv->nbyte,fmt_recv->flags);
                fmt_recv->flag = 0;
            }
            fmtr_recv->fd = fmt_send->fd;
            strcpy(fmtr_recv->recvbuff,fmt_recv->smf.buf);
            fmtr_recv->flag = 1;
            fmt_form->flag = 0;
            break;
        /*
        case BIND:
            shmid_bind = shmget((key_t)(BIND + 1), sizeof(FMT *), 0666 | IPC_CREAT);
            shmid_bind_ret = shmget((key_t)(BIND + 15), sizeof(FMT *), 0666 | IPC_CREAT);
            shm = shmat(shmid_bind, 0, 0);
            fmt = (FMT *)shm;
            printf("%d\n", fmt->fd);
            //if(ff_fdisused(fmt->fd)){
            if (fmt->fd > 0)
            {
                //struct sockaddr_in *ser = (struct sockaddr_in *)(fmt->address);
                //printf("write msg is  [%lx]  [%s] [%d:%d]\n", fmt->address, inet_ntoa(ser->sin_addr), ser->sin_addr.s_addr, ntohs(ser->sin_port));
                //fd = ff_bind(fmt->fd, (const struct linux_sockaddr *)(fmt->address), fmt->addrlen_len);
                printf("retrun fd:%d\n", fd);
                shm_ret = shmat(shmid_bind_ret, 0, 0);
                fmtr = (FMTR *)shm_ret;
                fmtr->fd = fd;
                fmtr->flag = 0;
                if (fmtr->flag == 0)
                {
                    fmtr->flag = 1;
                }
                printf("ret :%d %lx \n", fmtr->fd, fmtr->fd);
            }
            //}
            fmt_form->flag = 0;
            shmdt(shm);
            shmctl(shmid_bind, IPC_RMID, 0);
            break;
            */
        default:
            break;
        }
    }
}

int loop(void *arg)
{
    service(arg);
    //sleep(1);
}

int main(int argc, char *argv[])
{
    errno = 0;
    ff_init(argc, argv);
    shmid = shmget((key_t)1000, sizeof(FMT *), IPC_CREAT);
    if (shmid == -1)
    {
        perror("shmget()");
    }
    shmid_socket = shmget((key_t)(SOCKET + 1), sizeof(FMT *), IPC_CREAT);
    if (shmid_socket == -1)
    {
        perror("shmget()");
    }
    shmid_socket_ret = shmget((key_t)(SOCKET + 15), sizeof(FMTR *), IPC_CREAT);
    if (shmid_socket_ret == -1)
    {
        perror("shmget()");
    }
    shmid_connect = shmget((key_t)(CONNECT + 1), sizeof(FMT *), IPC_CREAT);
    if (shmid_connect == -1)
    {
        perror("shmget()");
    }
    shmid_connect_ret = shmget((key_t)(CONNECT + 15), sizeof(FMTR *), IPC_CREAT);
    if (shmid_connect_ret == -1)
    {
        perror("shmget()");
    }
    if (shmid == -1)
        printf("[DEBUG] with lz shm_id can't get\n");
    shmid_send = shmget((key_t)(SEND + 1), sizeof(FMT *), IPC_CREAT);
    if (shmid_send == -1)
    {
        perror("shmget()");
    }
    shmid_send_ret = shmget((key_t)(SEND + 15), sizeof(FMTR *), IPC_CREAT);
    if (shmid_send_ret == -1)
    {
        perror("shmget()");
    }
    shmid_recv = shmget((key_t)(RECV+1),sizeof(FMT*),IPC_CREAT);
    shmid_recv_ret = shmget((key_t)(RECV+15),sizeof(FMTR*),IPC_CREAT);
    int running = 1;
    fmt_form = (FMT *)shmat(shmid, 0, 0);
    fmt_socket = (FMT *)shmat(shmid_socket, 0, 0);
    fmt_connect = (FMT *)shmat(shmid_connect, 0, 0);
    fmt_send = (FMT *)shmat(shmid_send, 0, 0);
    fmt_recv = (FMT *)shmat(shmid_recv, 0, 0);

    fmtr_socket = (FMTR *)shmat(shmid_socket_ret, 0, 0);
    fmtr_connect = (FMTR *)shmat(shmid_connect_ret, 0, 0);
    fmtr_send = (FMTR *)shmat(shmid_send_ret, 0, 0);
    fmtr_recv = (FMTR *)shmat(shmid_recv_ret, 0, 0);
    while (running)
    {
        if (fmt_form->flag == 1)
        {
            int fd;
            switch (fmt_form->form)
            {
            case SOCKET:
                printf("write msg is [%d] [%d] [%d] [%d]\n", fmt_socket->form, fmt_socket->domain, fmt_socket->type, fmt_socket->protocol);
                fd = ff_socket(fmt_socket->domain, fmt_socket->type, fmt_socket->protocol);

                fmtr_socket->fd = fd;
                fmtr_socket->flag = 1;
                printf("ret :%d %lx\n", fmtr_socket->fd, fmtr_socket->fd);
                fmt_form->flag = 0;
                //shmctl(shmid,IPC_RMID,0);
                break;
            case CONNECT:

                printf("fd:[%d] \n", fmt_connect->fd);
                while (1)
                {
                    if (fmt_connect->flag == 1)
                    {
                        break;
                    }
                }
                printf("fd:[%d] \n", fmt_connect->fd);
                if (fmt_connect->fd > 0)
                {
                    int on = 1;
                    //ff_ioctl(fmt_connect->fd, 0x5421, &on);

                    //struct sockaddr_in ser = (struct sockaddr_in )&(fmt_connect->address);
                    /*
                        ser.sin_addr.s_addr = inet_addr("10.1.1.3");
                        ser.sin_family = AF_INET;
                        ser.sin_port = htons(6000);
                        */
                    //printf("write msg is fd:[%d] form[%d] [%lx] ser:[%lx] [%d] \n", fmt_connect->fd,fmt_connect->form, fmt_connect->address, ser, fmt_connect->addrlen_len);
                    //printf("write msg is  [%s] [%d:%d]\n", inet_ntoa(ser->sin_addr), ser->sin_addr.s_addr, ntohs(ser->sin_port));
                    //printf("trans msg is [%d]\n", fmt_connect->address->sa_family);
                    printf("write msg is fd:[%d] [%s] [%d:%d] size:[%d]\n", fmt_connect->fd, inet_ntoa(fmt_connect->address.sin_addr),
                           fmt_connect->address.sin_addr.s_addr, ntohs(fmt_connect->address.sin_port), sizeof(fmt_connect->address));
                    fd = ff_connect(fmt_connect->fd, (const struct linux_sockaddr *)&(fmt_connect->address), sizeof(struct sockaddr_in));
                    if (fd < 0 && errno != EINPROGRESS)
                        printf("conn failed, clientfd = %d,ret=%d,%d,%s\n", fmt_connect->fd, fd, errno, strerror(errno));
                    else
                        printf("conn suc\n");
                    fmt_connect->flag = 0;
                    fd = 0;
                    printf("retrun fd:%d\n", fd);
                    fmtr_connect->fd = fd;
                    fmtr_connect->flag = 1;
                    printf("ret :%d %lx \n", fmtr_connect->fd, fmtr_connect->fd);
                }
                fmt_form->flag = 0;
                if (fd == 0)
                    running = 0;
                
                // shmctl(shmid,IPC_RMID,0);
                break;
            default:
                break;
            }
        }
    }
    EV_SET(&kevSet, fmt_connect->fd, EVFILT_WRITE, EV_ADD, 0, MAX_EVENTS, NULL);
    assert((kq = ff_kqueue()) > 0);
    ff_kevent(kq, &kevSet, 1, NULL, 0, NULL);
    ff_run(loop, fmt_form);
    return 0;
}
